using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine;

namespace SaveFiles
{
    public class Proxy
    {
        public static bool HasExistingSaveData()
        {
            return PlayerPrefs.HasKey("SaveData");
        }

        public static void DeleteSaveData()
        {
            PlayerPrefs.DeleteKey("SaveData");
        }

        public SaveData Load()
        {
            if (!PlayerPrefs.HasKey("SaveData"))
            {
                throw new KeyNotFoundException($"No previously saved game settings available to load - call {nameof(HasExistingSaveData)}() first, to make sure there is SaveData available to load");
            }

            // store this, as loading PlayerPrefs can be slow on certain platforms
            var saveDataFromPlayerPrefs = PlayerPrefs.GetString("SaveData");

            var currentlyStoredSaveData = JsonConvert.DeserializeObject<SaveData>(saveDataFromPlayerPrefs);

            // assert that stored game settings are never newer than is supported in this version of the game
            if (currentlyStoredSaveData.Version > SaveData.LatestVersion)
            {
                throw new NotSupportedException($"The game settings version stored on this machine ('{currentlyStoredSaveData.Version}') are newer than this version of the game supports ('{SaveData.LatestVersion}') - make sure you are running the latest version of the game");
            }

            // if stored SaveData is older than save files generated by this version of the game,
            // we need to upgrade them to the current format
            if (currentlyStoredSaveData.Version < SaveData.LatestVersion)
            {
                UpgradeSaveData(currentlyStoredSaveData.Version, JObject.Parse(saveDataFromPlayerPrefs), ref currentlyStoredSaveData);
                Save(currentlyStoredSaveData);
                return currentlyStoredSaveData;
            }

            // otherwise simply parse the stored SaveData JSON blob
            return JsonConvert.DeserializeObject<SaveData>(saveDataFromPlayerPrefs);
        }

        public delegate void OperationOnCurrentSaveData(ref SaveData saveData);

        /// <summary>
        /// Public interface to use when making changes to the current SaveData
        /// </summary>
        /// <param name="operation">Method that makes changes to the currently saved data by modifying a SaveData object</param>
        public void UpdateCurrentSaveData(OperationOnCurrentSaveData operation)
        {
            if (!HasExistingSaveData())
            {
                Save(new SaveData(SaveData.LatestVersion));
            }
            var currentData = Load();
            operation(ref currentData);
            Save(currentData);
        }

        /// <summary>
        /// Takes information about an outdated instance of SaveData, and generates `upgradedSaveData`
        /// </summary>
        /// <remarks>
        /// If attempting to `Load()` encounters data where <see cref="SaveData.Version"/>
        /// is lower than <see cref="SaveData.LatestVersion"/>, we need to migrate this object from the old format to the current one
        /// </remarks>
        /// <param name="outdatedVersion">The version the <see cref="outdatedSettingsJSON"/> is based on</param>
        /// <param name="outdatedSettingsJSON">A JObject representing the outdated JSON-blob of the loaded settings</param>
        /// <param name="upgradedSaveData">Reference to a <see cref="SaveData"/> instance which needs to contain the final, upgraded object</param>
        private static void UpgradeSaveData(int outdatedVersion, JObject outdatedSettingsJSON, ref SaveData upgradedSaveData)
        {
            // currently void, as there is only SaveData of version 1 at this time
            upgradedSaveData.Version = SaveData.LatestVersion;
        }

        private static void Save(SaveData saveData)
        {
            PlayerPrefs.SetString("SaveData", JsonConvert.SerializeObject(saveData));
            PlayerPrefs.Save();
        }
    }
}
